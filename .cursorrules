# .cursorrules

Components & Naming

- Use functional components with `"use client"` if needed.
- Name in PascalCase under `src/components/`.
- Keep them small, typed with interfaces.
- Use Tailwind for common UI components like textarea, button, etc. Never use radix or shadcn.

Supabase

- use `npx supabase migration new ....` to generate migration files.
- do not try to run migration files.
- do not try to push data to the database.
- you may create migration files and then instruct the user how to proceed.

Icons

- Prefer `lucide-react`; name icons in PascalCase.
- Custom icons in `src/components/icons`.

Toast Notifications

- Use `react-toastify` in client components.
- `toast.success()`, `toast.error()`, etc.

Next.js Structure

- Use App Router in `app/`. Server components by default, `"use client"` for client logic.
- `.env` for secrets.

TypeScript & Syntax

- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).

File & Folder Names

- Next.js routes in kebab-case (e.g. `app/dashboard/page.tsx`).
- Shared types in `src/lib/types.ts`.
- Sort imports (external → internal → sibling → styles).

Inngest / Background Jobs

- Use `inngest.config.ts` for Inngest configuration.
- We're using supabase realtime to detect when our functions are making changes to the database
- Implemente standardized `isLastStep` convention for all Inngest functions to reliably indicate when a multi-step function has truly completed
- When adding a new Inngest function, always add it in both `inngest.config.ts` AND `src/app/api/inngest/route.ts` functions array, as functions must be registered in both places to be detected properly.

IMPORTANT:

- After all changes are made, ALWAYS build the project with `npm run build`. Ignore warnings, fix errors.
- Do not run `git add` or `git commit` after making changes. The user will handle git.
- Do not over-deliver. If you see opportunities for a good next step, pause and make the suggestion to the user. Do not automatically try and do too much.
- When debugging, do not try multiple fixes at once. Try one thing at a time and ask the user to test if the fix worked before trying something else.