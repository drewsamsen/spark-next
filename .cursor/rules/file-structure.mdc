---
description: Guidelines for project directory structure and file organization
globs: 
alwaysApply: false
---
# Project File Structure

## Directory Organization

The project follows a well-defined directory structure:

- `/src/app`: Next.js App Router routes
- `/src/components`: UI components
- `/src/repositories`: Database access classes
- `/src/services`: Business logic implementation
- `/src/hooks`: React hooks for components
- `/src/inngest`: Background job definitions
- `/src/lib`: Shared utilities, types, and helpers

## File Naming Conventions

### Use PascalCase for:
- **React Components**: Files that primarily export React components (e.g., `UserProfile.tsx`, `LoginForm.tsx`)
- **Component Files in `/src/components`**: All component files should use PascalCase
- **Layout Components in `/src/app`**: When the file is a reusable component (e.g., `AppShell.tsx`)
- **Layouts in `/src/layouts`**: Layout component files (e.g., `AppLayout.tsx`)

### Use kebab-case for:
- **Next.js Route Files**: Special files like `page.tsx`, `layout.tsx`, `error.tsx`, `loading.tsx`
- **Next.js Route Folders**: Directory names in app router (e.g., `user-profile/`, `settings/`)
- **Context Files**: React context providers (e.g., `sidebar-context.tsx`, `ui-settings-context.tsx`)
- **Type-only Files**: Files that only export types/interfaces (e.g., `types.ts` when it's not the main types file)
- **Utility Files**: Non-component utilities (e.g., `api-utils.ts`, `error-handling.ts`)
- **Third-party UI Components**: shadcn/ui components use kebab-case (e.g., `button.tsx`, `card.tsx`, `dropdown-menu.tsx`)

### Use camelCase with prefixes for:
- **Hooks**: Use `use` prefix (e.g., `useUser.ts`, `useAuthSession.ts`)
- **Services**: Use `.service` suffix (e.g., `auth.service.ts`, `user-settings.service.ts`)
- **Repositories**: Use `.repository` suffix (e.g., `auth.repository.ts`, `user-settings.repository.ts`)

### Key Principle:
**If a file primarily exports a React component, use PascalCase. Otherwise, use kebab-case or camelCase as appropriate.**

## Component Directory Structure

For complex components that consist of multiple files:

```
src/components/UserDashboard/
├── UserDashboard.tsx      # Main component
├── UserStats.tsx          # Sub-component
├── RecentActivity.tsx     # Sub-component
└── index.ts               # Re-export main component
```

## Route Structure

Follow Next.js App Router conventions:

```
src/app/
├── layout.tsx             # Root layout
├── app-layout.tsx         # Main application layout
├── page.tsx               # Home page
├── dashboard/
│   └── page.tsx           # Dashboard main page
├── (routes)/
│   └── settings/
│       └── page.tsx       # Settings page
└── api/
    └── inngest/
        └── route.ts       # Inngest API route
```

## Library Code

Organize utility code in the lib directory:

```
src/lib/
├── types.ts               # Shared type definitions
├── utils.ts               # General utilities
├── supabase.ts            # Supabase client
└── constants.ts           # Application constants
``` 