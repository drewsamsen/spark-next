---
description: Guidelines for repository service hook pattern and data flow
globs:
alwaysApply: false
---
# Data Architecture

## Layer Structure

- **Repository Layer**: Handles direct database access through Supabase
- **Service Layer**: Implements business logic using repositories
- **React Hooks**: Provides components with access to services
- **Components**: Consume hooks to display UI and handle interactions

## Implementation Flow

When implementing new features, follow the `repository → service → hook → component` flow:

1. Create/update repository methods for database operations
2. Implement business logic in services using repositories
3. Create hooks to expose services to components
4. Build components that consume the hooks

## Repository Layer

```typescript
// src/repositories/userRepository.ts
import { supabase } from "@/lib/supabase";
import { User } from "@/lib/types";

export class UserRepository {
  async getById(id: string): Promise<User | null> {
    const { data, error } = await supabase
      .from("users")
      .select("*")
      .eq("id", id)
      .single();
      
    if (error) throw error;
    return data;
  }
  
  // Additional database operations...
}
```

## Service Layer

```typescript
// src/services/userService.ts
import { UserRepository } from "@/repositories/userRepository";
import { User } from "@/lib/types";

export class UserService {
  private userRepo = new UserRepository();
  
  async getUserProfile(userId: string): Promise<User | null> {
    return this.userRepo.getById(userId);
  }
  
  // Business logic methods...
}
```

## Hook Layer

### Standard Hook Pattern

All hooks should follow this pattern for consistency and proper state management:

```typescript
// src/hooks/useResource.ts
import { useState, useEffect, useCallback } from "react";
import { useResourceService } from "./use-services";
import { useAuthService } from "./use-services";
import { toast } from "react-toastify";

interface UseResourceReturn {
  data: any[];
  isLoading: boolean;
  error: Error | null;
  fetchData: () => Promise<any[]>;
  // Other methods...
}

export function useResource(): UseResourceReturn {
  const [data, setData] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  
  const resourceService = useResourceService();
  const authService = useAuthService();
  
  // Load data on mount
  useEffect(() => {
    let isMounted = true;
    
    const loadData = async () => {
      try {
        setIsLoading(true);
        
        // Check authentication first
        const isAuthenticated = await authService.isAuthenticated();
        if (!isAuthenticated) {
          if (isMounted) {
            setData([]);
            setIsLoading(false);
          }
          return;
        }
        
        // Fetch data
        const result = await resourceService.getData();
        
        if (isMounted) {
          setData(result);
          setError(null);
        }
      } catch (err) {
        console.error('Error loading data:', err);
        if (isMounted) {
          setError(err instanceof Error ? err : new Error('Failed to load data'));
          setData([]);
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };
    
    loadData();
    
    // Subscribe to auth state changes
    const subscription = authService.onAuthStateChange(() => {
      loadData();
    });
    
    return () => {
      isMounted = false;
      subscription.unsubscribe();
    };
  }, [resourceService, authService]);

  // Add methods for CRUD operations with similar patterns
  const fetchData = useCallback(async () => {
    try {
      setIsLoading(true);
      const result = await resourceService.getData();
      setData(result);
      return result;
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Failed to fetch data'));
      return [];
    } finally {
      setIsLoading(false);
    }
  }, [resourceService]);
  
  return {
    data,
    isLoading,
    error,
    fetchData,
    // Other methods...
  };
}
```

## Hook Usage Best Practices

### 1. Always Handle Loading States

```typescript
function MyComponent() {
  const { data, isLoading, error } = useResource();

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;
  
  return (
    <div>
      {/* Render data here */}
    </div>
  );
}
```

### 2. Destructure Only What You Need

```typescript
// Good practice
function ResourceDisplay() {
  const { getData, updateData } = useResourceService();
  // Now use only these methods
}

// Avoid this
function ResourceDisplay() {
  const resourceService = useResourceService();
  // Using the entire service is less explicit
}
```

### 3. Use Authentication Checks

Always check authentication status before accessing protected resources:

```typescript
useEffect(() => {
  async function fetchData() {
    const isAuthenticated = await authService.isAuthenticated();
    if (!isAuthenticated) {
      // Handle unauthenticated state
      return;
    }
    
    // Continue with authenticated operations
  }
  
  fetchData();
}, [authService]);
```

### 4. Implement Optimistic Updates

Update UI state immediately for better user experience, then sync with backend:

```typescript
const updateItem = useCallback(async (id, newData) => {
  // 1. Update local state optimistically
  setItems(prev => prev.map(item => 
    item.id === id ? { ...item, ...newData } : item
  ));
  
  try {
    // 2. Persist to backend
    await itemService.updateItem(id, newData);
    toast.success('Item updated successfully');
  } catch (err) {
    // 3. Revert on failure
    setItems(prev => prev.map(item => 
      item.id === id ? originalItem : item
    ));
    toast.error('Failed to update item');
  }
}, [itemService]);
```

### 5. Provide Error Handling

Always implement proper error handling with user feedback:

```typescript
const createItem = useCallback(async (data) => {
  try {
    const newItem = await itemService.createItem(data);
    setItems(prev => [...prev, newItem]);
    toast.success('Item created successfully');
    return newItem;
  } catch (err) {
    console.error('Error creating item:', err);
    toast.error('Failed to create item');
    return null;
  }
}, [itemService]);
``` 