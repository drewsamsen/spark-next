---
description: Guidelines for Inngest automations and event-driven workflows
globs:
alwaysApply: false
---
# Inngest Automations

## Configuration

- Use `inngest.config.ts` for Inngest configuration
- Register all functions in both:
  - `inngest.config.ts`
  - `src/app/api/inngest/route.ts` functions array

## Function Naming Conventions

- All function variables should be named with the suffix `Fn`, e.g., `readwiseCountBooksFn`
- All function IDs should be kebab-case, e.g., `readwise-count-books`
- Each function should be in its own file, named in kebab-case matching the function ID
- Files should export the function variable, not the ID or event type

## Designing Automation Functions

- Implement standardized `isLastStep` convention for all multi-step functions
- Use clear, descriptive function and step names
- Provide comprehensive logging for automation execution

## Database Change Detection

- Use Supabase realtime to detect when functions make changes to the database
- Ensure proper error handling and retry mechanisms

## Categorization Automations

- All automated tag and category creation/application must be wrapped in a categorization automation
- Implement automation actions that provide a complete audit trail
- Allow for future review and potential rollback of automated changes

## Example Inngest Function

```typescript
// src/inngest/automations/processDocument.ts
import { inngest } from "../client";

export const processDocumentFn = inngest.createFunction(
  { id: "process-document" },
  { event: "document/created" },
  async ({ event, step }) => {
    // Step 1: Extract text from document
    const extractedText = await step.run("extract-text", async () => {
      // Text extraction logic
      return { text: "Extracted document text..." };
    });
    
    // Step 2: Analyze content
    const analysis = await step.run("analyze-content", async () => {
      // Content analysis logic
      return { 
        categories: ["finance", "reporting"],
        sentimentScore: 0.75
      };
    });
    
    // Step 3: Store results
    const result = await step.run("store-results", async () => {
      // Store results in database
      return { success: true };
    });
    
    // Final step - mark as completed
    const isLastStep = true;
    
    return { 
      document: event.data.documentId,
      analysis: analysis,
      isLastStep 
    };
  }
);
```

## Registering Functions

Make sure to register all functions in both required locations:

```typescript
// src/app/api/inngest/route.ts
import { processDocumentFn } from "@/inngest/functions/document/process-document";

export const { GET, POST, PUT } = serve({
  client: inngest,
  functions: [
    processDocumentFn,
    // Other functions...
  ],
});
``` 